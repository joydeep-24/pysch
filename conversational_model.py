import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

class ConversationalModel:
    """
    A wrapper for the Llama 3 8B Instruct model to handle conversation generation.
    """
    def __init__(self):
        """
        Initializes the model and tokenizer. This is a heavy operation and
        should only be done once.
        """
        self.model_name = "meta-llama/Meta-Llama-3-8B-Instruct"
        print(f"ðŸ”¹ Loading model: {self.model_name}...")

        # Load the tokenizer
        self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)

        # Load the model with 4-bit quantization to save memory
        self.model = AutoModelForCausalLM.from_pretrained(
            self.model_name,
            torch_dtype=torch.bfloat16,
            device_map="auto", # Automatically use GPU if available
            load_in_4bit=True,
        )

        # Create a text-generation pipeline
        self.pipe = pipeline(
            "text-generation",
            model=self.model,
            tokenizer=self.tokenizer,
        )
        print("âœ… Model loaded successfully.")

    def generate_response(self, chat_history):
        """
        Generates a response based on the conversation history.

        Args:
            chat_history (list): A list of dictionaries, e.g.,
                                 [{'role': 'user', 'content': 'Hello!'}]

        Returns:
            str: The generated response from the AI.
        """
        # Use the tokenizer's chat template to format the prompt correctly for Llama 3
        prompt = self.tokenizer.apply_chat_template(
            chat_history,
            tokenize=False,
            add_generation_prompt=True
        )

        # Generate the response using the pipeline
        terminators = [
            self.tokenizer.eos_token_id,
            self.tokenizer.convert_tokens_to_ids("<|eot_id|>")
        ]
        
        outputs = self.pipe(
            prompt,
            max_new_tokens=256,
            eos_token_id=terminators,
            do_sample=True,
            temperature=0.6,
            top_p=0.9,
        )
        
        # The response is in the 'generated_text' key of the output
        # We need to extract just the new text generated by the assistant
        full_response = outputs[0]['generated_text']
        # The prompt is part of the output, so we find and remove it.
        assistant_response = full_response[len(prompt):].strip()
        
        return assistant_response

# This block allows you to test the class directly
if __name__ == '__main__':
    print("Performing a test run of the ConversationalModel...")
    
    # Initialize the model (this will take a while and require a GPU)
    llm = ConversationalModel()
    
    # Create a sample conversation
    sample_history = [
        {"role": "system", "content": "You are a caring assistant."},
        {"role": "user", "content": "I'm feeling a bit down today."},
    ]
    
    # Generate a response
    response = llm.generate_response(sample_history)
    
    print("\n--- Test Conversation ---")
    print(f"User: {sample_history[-1]['content']}")
    print(f"Assistant: {response}")
    print("------------------------")